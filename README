python-dogecoinlib
-----------------

This Python2/3 library provides an easy interface to the dogecoin data
structures and protocol. The approach is low-level and "ground up", with a
focus on providing tools to manipulate the internals of how Dogecoin works.

"The Swiss Army Knife of the Dogecoin protocol." - Wladimir J. van der Laan


Requirements
------------

    sudo apt-get install libssl-dev

The RPC interface, dogecoin.rpc, is designed to work with Dogecoin Core v0.9.
Older versions mostly work but there do exist some incompatibilities.


Structure
---------

Everything consensus critical is found in the modules under dogecoin.core. This
rule is followed pretty strictly, for instance chain parameters are split into
consensus critical and non-consensus-critical.

dogecoin.core            - Basic core definitions, datastructures, and
                          (context-independent) validation
dogecoin.core.key        - ECC pubkeys
dogecoin.core.script     - Scripts and opcodes
dogecoin.core.scripteval - Script evaluation/verification
dogecoin.core.serialize  - Serialization

In the future the dogecoin.core may use the Satoshi sourcecode directly as a
library. Non-consensus critical modules include the following:

dogecoin            - Chain selection
dogecoin.base58     - Base58 encoding
dogecoin.bloom      - Bloom filters (incomplete)
dogecoin.net        - Network communication (in flux)
dogecoin.messages   - Network messages (in flux)
dogecoin.rpc        - Dogecoin Core RPC interface support
dogecoin.wallet     - Wallet-related code, currently Dogecoin address and private
                     key support

Effort has been made to follow the Satoshi source relatively closely, for
instance Python code and classes that duplicate the functionality of
corresponding Satoshi C++ code uses the same naming conventions: CTransaction,
CBlockHeader, nValue etc. Otherwise Python naming conventions are followed.


Mutable vs. Immutable objects
-----------------------------

Like the Dogecoin Core codebase CTransaction is immutable and
CMutableTransaction is mutable; unlike the Dogecoin Core codebase this
distinction also applies to COutPoint, CTxIn, CTxOut, and CBlock.


Endianness Gotchas
------------------

Rather confusingly Dogecoin Core shows transaction and block hashes as
little-endian hex rather than the big-endian the rest of the world uses for
SHA256. python-dogecoinlib provides the convenience functions x() and lx() in
dogecoin.core to convert from big-endian and little-endian hex to raw bytes to
accomodate this. In addition see b2x() and b2lx() for conversion from bytes to
big/little-endian hex.


Module import style
-------------------

While not always good style, it's often convenient for quick scripts if import
* can be used. To support that all the modules have __all__ defined
appropriately.


Example Code
------------

See examples/ directory. For instance this example creates a transaction
spending a pay-to-script-hash transaction output:

    $ PYTHONPATH=. examples/spend-pay-to-script-hash-txout.py
    <hex-encoded transaction>

Also see dust-b-gone for a simple example of Dogecoin Core wallet interaction
through the RPC interface: https://github.com/petertodd/dust-b-gone


Selecting the chain to use
--------------------------

Do the following:

    import dogecoin
    dogecoin.SelectParams(NAME)

Where NAME is one of 'testnet', 'mainnet', or 'regtest'. The chain currently
selected is a global variable that changes behavior everywhere, just like in
the Satoshi codebase.


Unit tests
----------

Under dogecoin/tests using test data from Dogecoin Core. To run them:

    python -m unittest discover && python3 -m unittest discover

Please run the tests on both Python2 and Python3 for your pull-reqs!
